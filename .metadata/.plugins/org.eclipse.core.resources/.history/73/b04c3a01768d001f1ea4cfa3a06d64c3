package com.example.demo.Servicios;

import org.apache.poi.ss.usermodel.*;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.Entidades.Calificacion;
import com.example.demo.Repository.CalificacionRepository;
import com.example.demo.Servicios.ProgramaService;


import org.springframework.beans.factory.annotation.Autowired;

import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.Iterator;




@Service
public class ExcelService {

    @Autowired
    private CalificacionRepository calificacionRepository;
    

    @Autowired
    private ProfesorService profesorService;

    @Autowired
    private ProgramaService programaService;

    @Autowired
    private MateriaService materiaService;

    public String processExcel(MultipartFile file) {
        try (InputStream is = file.getInputStream()) {
            Workbook workbook = WorkbookFactory.create(is);
            Sheet sheet = workbook.getSheetAt(0);

            Iterator<Row> rows = sheet.iterator();
            int rowNumber = 0;
            while (rows.hasNext()) {
                Row currentRow = rows.next();

                // Saltar la fila de encabezados
                if (rowNumber == 0) {
                    rowNumber++;
                    continue;
                }

                Calificacion calificacion = new Calificacion();

                // Validaciones y obtenci√≥n de valores
                String profesorNombre = getCellValueAsString(currentRow.getCell(0));
                String programaNombre = getCellValueAsString(currentRow.getCell(1));
                String materiaNombre = getCellValueAsString(currentRow.getCell(2));
                String periodo = getCellValueAsString(currentRow.getCell(9));
                Double notaEstudiante = getCellValueAsDouble(currentRow.getCell(5));
                Double notaDirector = getCellValueAsDouble(currentRow.getCell(6));
                Double autoevaluacion = getCellValueAsDouble(currentRow.getCell(7));
                Double definitiva = getCellValueAsDouble(currentRow.getCell(8));

                // Verificar que no hay datos faltantes
                if (profesorNombre == null || programaNombre == null || materiaNombre == null ||
                    periodo == null || notaEstudiante == null || notaDirector == null ||
                    autoevaluacion == null || definitiva == null) {
                    return "Hay datos faltantes en la fila " + (rowNumber + 1) + ".";
                }

                // Obtener IDs correspondientes (asumiendo que tienes servicios o repositorios para esto)
                Integer profesorId =profesorService.obtenerProfesorIdPorNombre(profesorNombre);
                Integer programaId = programaService.obtenerProgramaIdPorNombre(programaNombre);
                Integer materiaId = materiaService.obtenerMateriaIdPorNombre(materiaNombre);

                if (profesorId == null) {
                	return "El profesor '" + profesorNombre + "' no existe en la base de datos.";
                }else if(programaId == null || materiaId == null) {
                	return "No se pudo encontrar el ID para profesor, programa o materia en la fila " + (rowNumber + 1) + ".";
                }

                // Asignar valores a la entidad
                calificacion.setProfesorId(profesorId);
                calificacion.setProgramaId(programaId);
                calificacion.setMateriaId(materiaId);
                calificacion.setPeriodo(periodo);
                calificacion.setNotaEstudiante(notaEstudiante);
                calificacion.setNotaDirector(notaDirector);
                calificacion.setNotaAutoevaluacion(autoevaluacion);
                calificacion.setNotaDefinitiva(definitiva);
                calificacion.setFechaRegistro(LocalDateTime.now());

                // Guardar en la base de datos
                calificacionRepository.save(calificacion);
                rowNumber++;
            }

            workbook.close();
            return "success";

        } catch (Exception e) {
            e.printStackTrace();
            return "Error al procesar el archivo.";
        }
    }


    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return null;
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            case BLANK:
                return null;
            default:
                return null;
        }
    }

    private Double getCellValueAsDouble(Cell cell) {
    	System.out.println(cell.getColumnIndex());
    	if (cell == null)
			return null;
        if (cell.getCellType() == CellType.NUMERIC) {
            return cell.getNumericCellValue();
        } else if (cell.getCellType() == CellType.STRING) {
            try {
                return Double.parseDouble(cell.getStringCellValue());
            } catch (NumberFormatException e) {
                return null;
            }
        } else {
            return null;
        }
    }

}
